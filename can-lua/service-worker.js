/* service-worker.js ‚Äî NO-SILENT-UPDATE for T√çNH C√ÇN L√öA */
const APP_VERSION  = 'can-lua-v1.0.3';
const CACHE_STATIC = `static-${APP_VERSION}`;

// X√°c ƒë·ªãnh base path (v√≠ d·ª•: /can-lua/)
const BASE = new URL(self.location.href).pathname.replace(/[^/]+$/, '');

// Danh s√°ch file c·ªët l√µi (app shell)
const CORE = [
  '',
  'index.html',
  'offline.html',
  'manifest.webmanifest',
  'service-worker.js',
  'icons/icon-96.png',
  'icons/icon-192.png',
  'icons/icon-512.png',
  'icons/icon-1024.png',
  'icons/maskable-192.png',
  'icons/maskable-512.png',
].map(p => BASE + p);

// ========== INSTALL ==========
self.addEventListener('install', (event) => {
  event.waitUntil((async () => {
    const cache = await caches.open(CACHE_STATIC);
    await Promise.all(CORE.map(async (url) => {
      try { await cache.add(new Request(url, { cache: 'reload' })); }
      catch (_) { /* b·ªè qua file l·ªói */ }
    }));
  })());
  // ‚ùå KH√îNG skipWaiting ‚Äî ƒë·ª£i ng∆∞·ªùi d√πng x√°c nh·∫≠n t·ª´ app
});

// ========== MESSAGE ==========
self.addEventListener('message', (event) => {
  if (!event.data) return;
  if (event.data.type === 'SKIP_WAITING') {
    try { self.skipWaiting(); } catch (_) {}
  }
  if (event.data.type === 'CLIENTS_CLAIM') {
    try { self.clients.claim(); } catch (_) {}
  }
});

// ========== ACTIVATE ==========
self.addEventListener('activate', (event) => {
  event.waitUntil((async () => {
    // ‚ùå KH√îNG b·∫≠t navigationPreload ƒë·ªÉ tr√°nh ‚Äút∆∞∆°i‚Äù ng·∫ßm
    // D·ªçn cache c≈© ch·ªâ khi SW n√†y tr·ªü th√†nh active
    const keys = await caches.keys();
    await Promise.all(
      keys.filter(k => k.startsWith('static-') && k !== CACHE_STATIC)
          .map(k => caches.delete(k))
    );
    // ‚ùå KH√îNG clients.claim() t·ª± ƒë·ªông ‚Äî ch·ªâ claim khi ng∆∞·ªùi d√πng cho ph√©p
  })());
});

// Helper
const isHTML = (req) => (req.headers.get('accept') || '').includes('text/html');

// ========== FETCH ==========
self.addEventListener('fetch', (event) => {
  const req = event.request;
  if (req.method !== 'GET') return;

  const url = new URL(req.url);
  const isSameOrigin = url.origin === location.origin;

  // üö´ Lu√¥n b·ªè qua SW cho version.json ‚Üí NetworkOnly, no-store
  if (isSameOrigin && url.pathname === BASE + 'version.json') {
    event.respondWith(fetch(req, { cache: 'no-store' }));
    return;
  }

  // 1Ô∏è‚É£ HTML (App Shell) ‚Äî CACHE FIRST, KH√îNG revalidate ng·∫ßm
  if (isSameOrigin && (req.mode === 'navigate' || isHTML(req))) {
    event.respondWith((async () => {
      const cache = await caches.open(CACHE_STATIC);
      const cached = await cache.match(BASE + 'index.html', { ignoreSearch: true });
      if (cached) return cached;

      try {
        const fresh = await fetch(new Request(BASE + 'index.html', { cache: 'reload' }));
        if (fresh?.ok) await cache.put(BASE + 'index.html', fresh.clone());
        return fresh;
      } catch {
        const offline = await cache.match(BASE + 'offline.html');
        return offline || new Response('Offline', { status: 503 });
      }
    })());
    return;
  }

  // 2Ô∏è‚É£ Static same-origin ‚Äî CACHE FIRST, KH√îNG refresh ng·∫ßm
  if (isSameOrigin) {
    event.respondWith((async () => {
      const cache = await caches.open(CACHE_STATIC);
      const cached = await cache.match(req, { ignoreSearch: true });
      if (cached) return cached;

      try {
        const res = await fetch(new Request(req, { cache: 'no-store' }));
        if (res?.ok) cache.put(req, res.clone());
        return res;
      } catch {
        return new Response('', { status: 204 });
      }
    })());
    return;
  }

  // 3Ô∏è‚É£ Ngo√†i origin: ƒë·ªÉ m·∫∑c ƒë·ªãnh tr√¨nh duy·ªát x·ª≠ l√Ω
});